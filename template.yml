AWSTemplateFormatVersion: '2010-09-09'
Transform: 'AWS::Serverless-2016-10-31'
Description: An AWS Lambda application that processes records read from Amazon MSK and syncs to Amazon S3.
Parameters:
  VPCStack:
    Description: The name of the VPC stack
    Type: String
  BastionStack:
    Description: The name of the Bastion/Kafka client instance stack
    Type: String
    Default: MSKClient
  MSKStack:
    Description: The name of the MSK stack
    Type: String
    Default: MSK
  BatchSize:
    Description: MSK Event Source Mapping - number of records retrieved per batch
    Type: Number
    MinValue: 1
    MaxValue: 10000
    Default: 500
  LambdaRetries:
    Description: The number of times the lambda function will retry sending records to Firehose
    Type: Number
    MinValue: 1
    MaxValue: 5
    Default: 3
  GlueSchemaRegistryName:
    Description: The name of the Glue Schema Registry used for serialization
    Type: String
    Default: default-registry

Resources:
  ProcessMSKfunction:
    Type: AWS::Serverless::Function
    DependsOn: MSKToS3LambdaPolicy
    Properties:
      CodeUri: ./target/MSKToS3Lambda-1.0-SNAPSHOT.jar
      Handler: com.amazonaws.kafka.samples.HandlerMSK
      Runtime: java11
      Description: Java function
      MemorySize: 1024
      ReservedConcurrentExecutions: 3
      Timeout: 300
      Environment:
        Variables:
          DELIVERY_STREAM_NAME: !Ref DeliveryStream
          RETRIES: !Ref LambdaRetries
      # Function's execution role
      Role: !GetAtt LambdaRole.Arn
      Events:
        MSKEvent:
          Type: MSK
          Properties:
            StartingPosition: TRIM_HORIZON
            Stream:
              Fn::ImportValue:
                !Sub "${MSKStack}-MSKClusterArn"
            BatchSize: !Ref BatchSize
            Topics:
              - ExampleTopic
            ProvisionedPollerConfig:
              MaximumPollers: 3
              MinimumPollers: 1
            SchemaRegistryConfig: 
              SchemaRegistryURI: !Sub 'arn:aws:glue:${AWS::Region}:${AWS::AccountId}:registry/${GlueSchemaRegistryName}'
              EventRecordFormat: JSON
              SchemaValidationConfigs:
                - Attribute: VALUE

  MSKToS3LambdaPolicy:
    Type: 'AWS::IAM::Policy'
    Properties:
      PolicyName: MSKLambdaS3
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action:
              - ec2:CreateNetworkInterface
              - ec2:DescribeNetworkInterfaces
              - ec2:DescribeVpcs
              - ec2:DeleteNetworkInterface
              - ec2:DescribeSubnets
              - ec2:DescribeSecurityGroups
            Resource: '*'
          - Effect: Allow
            Action:
              - kafka-cluster:Connect
              - kafka-cluster:DescribeGroup
              - kafka-cluster:AlterGroup
              - kafka-cluster:DescribeTopic
              - kafka-cluster:ReadData
              - kafka-cluster:DescribeClusterDynamicConfiguration
            Resource:
                  - !Sub 'arn:aws:kafka:${AWS::Region}:${AWS::AccountId}:cluster/*'
                  - !Sub 'arn:aws:kafka:${AWS::Region}:${AWS::AccountId}:topic/*'
                  - !Sub 'arn:aws:kafka:${AWS::Region}:${AWS::AccountId}:group/*'
          - Effect: Allow
            Action:
              - firehose:PutRecordBatch
            Resource: !GetAtt DeliveryStream.Arn
          - Effect: Allow
            Action:
              - kafka:DescribeCluster
              - kafka:GetBootstrapBrokers
            Resource:
              Fn::ImportValue:
                !Sub "${MSKStack}-MSKClusterArn"
          - Effect: Allow
            Action:
              - glue:GetSchemaByDefinition
              - glue:GetSchemaVersion
              - glue:GetRegistry
            Resource: '*'
      Roles:
        - !Ref LambdaRole

  LambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Sid: ''
            Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: 'sts:AssumeRole'
      Path: "/"
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole

  S3Bucket:
    Type: AWS::S3::Bucket
    DeletionPolicy: Retain

  DeliveryStream:
    Type: AWS::KinesisFirehose::DeliveryStream
    Properties:
      DeliveryStreamType: DirectPut
      ExtendedS3DestinationConfiguration:
        RoleARN: !GetAtt DeliveryRole.Arn
        BucketARN: !Sub 'arn:aws:s3:::${S3Bucket}'
        Prefix: MSKToS3/
        ErrorOutputPrefix: errors/
        BufferingHints:
          SizeInMBs: 5
          IntervalInSeconds: 120
        CompressionFormat: UNCOMPRESSED
        EncryptionConfiguration:
          NoEncryptionConfig: NoEncryption
        CloudWatchLoggingOptions:
          Enabled: true
          LogGroupName: !Ref DeliveryLogGroup
          LogStreamName: S3Delivery
        S3BackupMode: Disabled

  DeliveryLogGroup:
    Type : AWS::Logs::LogGroup
    Properties:
      LogGroupClass: STANDARD
      LogGroupName: /aws/kinesisfirehose/KDF-MSKToS3
      RetentionInDays: 14

  DeliveryLogStream:
    Type : AWS::Logs::LogStream
    Properties:
      LogGroupName: !Ref DeliveryLogGroup
      LogStreamName: S3Delivery

  DeliveryRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Sid: ''
            Effect: Allow
            Principal:
              Service: firehose.amazonaws.com
            Action: 'sts:AssumeRole'
            Condition:
              StringEquals:
                'sts:ExternalId': !Ref 'AWS::AccountId'
      Path: "/"
      Policies:
        - PolicyName: firehose_delivery_policy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - 's3:AbortMultipartUpload'
                  - 's3:GetBucketLocation'
                  - 's3:GetObject'
                  - 's3:ListBucket'
                  - 's3:ListBucketMultipartUploads'
                  - 's3:PutObject'
                Resource:
                  - !Sub 'arn:aws:s3:::${S3Bucket}'
                  - !Sub 'arn:aws:s3:::${S3Bucket}/*'
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource:
                  - !Sub 'arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:${DeliveryLogGroup}:*'
